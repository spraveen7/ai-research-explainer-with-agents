"""
Command Line Interface for AI Research Topic Explainer
"""
import os
import json
from datetime import datetime
from main_orchestrator import AIResearchOrchestrator

def save_results(result, topic):
    """Save results to a file"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"results/{topic.replace(' ', '_')}_{timestamp}.json"
    
    # Create results directory if it doesn't exist
    os.makedirs("results", exist_ok=True)
    
    with open(filename, 'w') as f:
        json.dump(result, f, indent=2)
    
    return filename

def save_study_guide(result, topic):
    """Save study guide to a markdown file"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"results/{topic.replace(' ', '_')}_{timestamp}.md"
    
    # Create results directory if it doesn't exist
    os.makedirs("results", exist_ok=True)
    
    with open(filename, 'w') as f:
        f.write(f"# 📚 Study Guide: {topic}\n\n")
        f.write("## 🔍 Research Summary\n")
        f.write(result['research'] + "\n\n")
        f.write("## 📝 Content Summary\n")
        f.write(result['summary'] + "\n\n")
        f.write("## 🎨 Visual Diagrams\n")
        f.write(result['diagrams'] + "\n\n")
        f.write("## 📚 Educational Materials\n")
        f.write(result['educational_materials'] + "\n\n")
        f.write("---\n")
        f.write("*Generated by 4-Agent AI Research Explainer*\n")
    
    return filename

def display_results(result):
    """Display results in a formatted way"""
    print("\n" + "="*60)
    print("✅ 4-Agent Research Complete!")
    print("="*60)
    
    print(f"\n📚 Topic: {result['topic']}")
    
    print(f"\n🔍 Research:")
    print(result['research'][:500] + "..." if len(result['research']) > 500 else result['research'])
    
    print(f"\n📝 Summary:")
    print(result['summary'][:500] + "..." if len(result['summary']) > 500 else result['summary'])
    
    print(f"\n🎨 Diagrams:")
    print(result['diagrams'][:300] + "..." if len(result['diagrams']) > 300 else result['diagrams'])
    
    print(f"\n📚 Educational Materials:")
    print(result['educational_materials'][:500] + "..." if len(result['educational_materials']) > 500 else result['educational_materials'])

def main():
    """Main CLI function"""
    print("🤖 AI Research Topic Explainer - 4-Agent System")
    print("=" * 60)
    print("This system uses 4 specialized AI agents to research and explain any topic:")
    print("1. 🔍 Research Agent - Finds information using web search")
    print("2. 📝 Summarizer Agent - Creates structured summaries")
    print("3. 🎨 Visualizer Agent - Creates Mermaid diagrams")
    print("4. 📚 Tutor Agent - Creates educational materials")
    print("=" * 60)
    
    try:
        # Initialize the orchestrator
        print("\n🚀 Initializing 4-Agent system...")
        orchestrator = AIResearchOrchestrator()
        
        while True:
            # Get topic from user
            topic = input("\n🔍 Enter a topic to research (or 'quit' to exit): ").strip()
            
            if topic.lower() in ['quit', 'exit', 'q']:
                print("👋 Thank you for using AI Research Topic Explainer!")
                break
            
            if not topic:
                print("❌ Please enter a valid topic.")
                continue
            
            print(f"\n🚀 Starting 4-agent research on: {topic}")
            print("⏳ This may take a moment as all 4 agents work together...")
            
            try:
                # Run the 4-agent system
                result = orchestrator.explain_topic(topic)
                
                # Display results
                display_results(result)
                
                # Ask if user wants to save results
                save_choice = input("\n💾 Save results? (y/n): ").strip().lower()
                if save_choice in ['y', 'yes']:
                    json_file = save_results(result, topic)
                    md_file = save_study_guide(result, topic)
                    print(f"📁 Results saved:")
                    print(f"   JSON: {json_file}")
                    print(f"   Study Guide: {md_file}")
                
            except Exception as e:
                print(f"❌ Error during research: {str(e)}")
                print("Please check your API keys and try again.")
    
    except KeyboardInterrupt:
        print("\n\n👋 Goodbye!")
    except Exception as e:
        print(f"❌ Error initializing system: {str(e)}")
        print("Please check your setup and try again.")

if __name__ == "__main__":
    main()